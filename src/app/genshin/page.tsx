import "@/app/project.css"
import GenshinForm from "./getGenshin"

export default function FibonacciPage(){
    return(
        <div>
            <div className="title-box">
                <h4>원신 가챠 시뮬레이터</h4>
            </div>
            <div className="content-box">
                <h4>제작 동기</h4>
                <p>제가 게임을 하며 평소에 캐릭터를 뽑는데 드는 평균적인 비용이 궁금했습니다. 그런데 원신의 가챠 시스템은 <span>계산만으로 풀기 힘들기 때문</span>에 코딩으로 가챠를 여러번 돌려서 평균값을 구하고, <span>내가 뽑았을때 상위 몇%인지 구하는 프로그램</span>을 제작하게 되었습니다. 처음 제작할때는 <span>파이썬</span>으로 제작하였지만, 시뮬레이션을 돌리는 과정에서 너무 오랜시간이 걸려서 <span>C언어</span>로 제작하면 빠른 속도로 돌릴 수 있을 것 같아 제작하게 되었습니다.</p>
                <h4>원신의 가챠 시스템</h4>
                <p>원신의 가챠는 픽업 캐릭터를 뽑는것이 목적이다. 픽업 캐릭터는 5성이 등장했을때 50% 확률로 등장한다. 단, 이전의 뽑기에서 5성캐릭터가 나왔지만 픽업 캐릭터가 아닌 경우, 다음 뽑기에서 5성은 확정적으로 픽업 캐릭터가 등장한다. (픽업, 픽업X, 픽업(확정), 픽업)</p>
                <p>원신은 74회 가챠를 돌리기 이전은 5성이 0.6%확률로 등장한다. 74회 가챠 이상의 경우, 초과한 뽑기 수 만큼 각 6%씩 확률이 오른다. (73회 0.6%, 74회 6.6% ... 90회 100%)</p>
                <p>픽업 캐릭터가 아닌 캐릭터는 총 7개로, 픽업 캐릭터가 등장하지 않았을때 동일한 확률로 등장한다.</p>
                <h4>제작 과정</h4>
                <p>초기에 이 프로그램은 파이썬으로 제작하였습니다. 파이썬으로 작성했을때 프로그램 실행 기간이 너무 길고, C언어로 제작하면 코딩 실력에 많이 도움될수 있을것 같아 C언어로 제작하게 되었습니다.</p>
                <p>초기에는 <span>문자열과 정수가 있는 2차원 배열</span>을 활용해서 제작하였습니다. 그러나 프로그램을 제작하던 도중, <span>이중 포인터</span>를 사용해야하는 부분이 생겨서 코드가 복잡해지고, 문자열로 이루어진 2차원 배열을 사용하는것이 비효율적이라고 생각하였기 때문에 처음부터 다시 짜게 되었습니다.</p>
                <p>그렇게 개선한 방안은 <span>함수의 반환값을 없애고</span>, 파이썬 코드 사이에 집어넣어서 변수값을 바꾸도록 하였습니다. 또한 이차원 배열의 요소들을 모두 정수로 변경하였고, 픽업캐릭터가 나온 경우를 0, 아닌 경우로 1로 표현해서 마지막에 사용자에게 보여줄때 단 한번만 문자열을 사용하도록 하였습니다.</p>
                <p>프로그램을 완성하고 파이썬과 비교해본 결과, 시뮬레이션을 10만회 돌렸을때 <span>파이썬은 28.1초</span>, <span>C언어는 0.85초</span>로 확연한 차이가 있음을 알 수 있었습니다.</p>
                <h4>배운 내용</h4>
                <p>프로그램을 제작하면서 <span>코드를 최적화</span>하는 방법은 단순히 코드를 보이는대로 짜는것이 아닌 <span>최소한의 메모리 사용</span>을 해야한다는것을 알게 되었습니다.</p>
                <GenshinForm/>
                <div className="footer-box"></div>
            </div>
        </div>
    )
}